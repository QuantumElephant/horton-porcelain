# Simplest case of using horton 3 in HF. Everything not specified is generated by smart defaults.

import numpy as np
from horton import from_file, from_inchi, from_pubchem, from_coordinates, hf_solver


####
# From (any) file type
####

molecule = from_file("water.xyz")  # load molecule spec
water_solver = hf_solver(molecule)  # generates ints and runs HF as soon as it is instantiated
print("energy: ", water_solver.energy)  # print stored energy
np.save("ones", water_solver.ones_mo)  # save stored MOs

#####
# From Inchi (needs internet)
#####

molecule = from_inchi("RYYVLZVUVIJVGH-UHFFFAOYSA-N")  # load molecule spec
water_solver = hf_solver(molecule)  # generates ints and runs HF as soon as it is instantiated

#####
# From PubChem (needs internet)
#####

molecule = from_pubchem("2519")  # load molecule spec
water_solver = hf_solver(molecule)  # generates ints and runs HF as soon as it is instantiated

#####
# From geometry
#####

molecule = from_coordinates(coords=[[0, 0, 0], ], numbers=[1])
water_solver = hf_solver(molecule)  # generates ints and runs HF as soon as it is instantiated

coords, numbers = np.array([[0,0,0],]), np.array([1])
molecule = from_coordinates(coords, numbers)
water_solver = hf_solver(molecule)  # generates ints and runs HF as soon as it is instantiated

#####
# Coordinate scan
#####

for i in np.arange(0.5,2,0.1):
    molecule = from_coordinates(coords=[[0, 0, i], [0,0,0] ], numbers=[1,1])
    water_solver = hf_solver(molecule)
    print("distance: {i}, energy: {water_solver.energy}")